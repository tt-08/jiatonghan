library(ggplot2)
library(dplyr)
library(tidyr)
library(texreg)
library(plm)
raw_data <- read.csv('/Users/jiatonghan/Library/CloudStorage/OneDrive-Personal/001 - Research Projects/Neurobubble/Data/Sep_26_flattened_data.csv')
# a.	Unbiased
# b.	No autocorrelation
# c.	Errors uncorrelated with forecast levels
raw_data$part_label <- as.factor(raw_data$part_label)
# Assign unique numeric ID to each factor level
raw_data$part_label_ID <- as.numeric(raw_data$part_label)
raw_data$part_label_ID <- as.character(raw_data$part_label_ID)
# View the head of the data to confirm the IDs
head(raw_data[, c("part_label", "part_label_ID")])
# cols of forecast
forecast_data <- raw_data[, c("session", "round", "price", "prev_price", "part_label_ID", "pl_f0", "pl_f1", "pl_f2", "pl_f3", "pl_fcast_rnd_0",
"pl_fcast_rnd_1", "pl_fcast_rnd_2", "pl_fcast_rnd_3", "pl_fcast_err_0", "pl_fcast_err_1", "pl_fcast_err_2", "pl_fcast_err_3")]
# Reformat the data from wide to long format
forecast_data_long <- forecast_data[,c("round", "pl_fcast_err_0", "pl_fcast_err_1", "pl_fcast_err_2", "pl_fcast_err_3")] %>%
pivot_longer(cols = starts_with("pl_fcast_err"),  # Pivot columns that start with "pl_fcast_err"
names_to = "Type",                  # New column name for the types (e.g., pl_fcast_err_0)
values_to = "pl_fcast_err")         # New column for the values (forecast errors)
forecast_data_long$Type <- ifelse(forecast_data_long$Type == "pl_fcast_err_0", "horizon = 0",
ifelse(forecast_data_long$Type == "pl_fcast_err_1", "horizon = 2",
ifelse(forecast_data_long$Type == "pl_fcast_err_2", "horizon = 5", "horizon = 10")))
forecast_data_long$Type <- factor(forecast_data_long$Type, levels = c("horizon = 0", "horizon = 2", "horizon = 5", "horizon = 10"))
# Plot distribution of pl_fcast_err_0 grouped by round
ggplot(forecast_data_long, aes(x = pl_fcast_err, fill = factor(round))) +
facet_wrap(~Type, scales = "free") +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Forecast Error Grouped by Round and Horizon",
x = "Forecast Error",
y = "Density",
fill = "Round") +
theme_minimal()+
theme(
strip.text = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),   # Maximize title text
axis.title.x = element_text(size = 18),                # Maximize X-axis label text
axis.title.y = element_text(size = 18),                # Maximize Y-axis label text
axis.text = element_text(size = 16),                   # Maximize tick labels
legend.text = element_text(size = 16),                 # Maximize legend text (if used)
legend.title = element_text(size = 18)                 # Maximize legend title (if used)
)
# Test at individual level is whether mean P_{t+h}- f_{it,t+h} is zero across t for each different value of h.
# That will give four test statistics for each of the horizon h values.
# T-tests should be adequate:
# Test whether the mean for each person i and horizon h is zero or not.
# Be sure to report some summary statistics to check whether normality of errors is approximated.
# It may be that (log[P_{t+h}- f_{it,t+h}]) makes data more Gaussian normalized.
# group by round, calcualte the mean and median for "pl_fcast_err_0", "pl_fcast_err_1", "pl_fcast_err_2", "pl_fcast_err_3"
forecast_data_summary <- forecast_data %>%
group_by(round) %>%
summarise(
pl_fcast_err_mean_0 = mean(pl_fcast_err_0, na.rm = TRUE),
pl_fcast_err_median_0 = median(pl_fcast_err_0, na.rm = TRUE),
pl_fcast_err_se_0 = sd(pl_fcast_err_0, na.rm = TRUE) / sqrt(n()),
pl_fcast_err_mean_1 = mean(pl_fcast_err_1, na.rm = TRUE),
pl_fcast_err_median_1 = median(pl_fcast_err_1, na.rm = TRUE),
pl_fcast_err_se_1 = sd(pl_fcast_err_1, na.rm = TRUE) / sqrt(n()),
pl_fcast_err_mean_2 = mean(pl_fcast_err_2, na.rm = TRUE),
pl_fcast_err_median_2 = median(pl_fcast_err_2, na.rm = TRUE),
pl_fcast_err_se_2 = sd(pl_fcast_err_2, na.rm = TRUE) / sqrt(n()),
pl_fcast_err_mean_3 = mean(pl_fcast_err_3, na.rm = TRUE),
pl_fcast_err_median_3 = median(pl_fcast_err_3, na.rm = TRUE),
pl_fcast_err_se_3 = sd(pl_fcast_err_3, na.rm = TRUE) / sqrt(n())
)
long_format <- forecast_data_summary %>%
pivot_longer(
cols = starts_with("pl_fcast_err_"),  # Selects columns starting with 'pl_fcast_err_'
names_to = c(".value", "Type"),       # Splits the column names into `.value` and `Type`
names_pattern = "pl_fcast_err_(mean|median|se)_(\\d+)"  # Regex to capture the mean/se and the type number
)
# Now the data is in long format, with 'round', 'Type', 'mean', and 'se'
# You can keep the necessary columns or further manipulate it
wide_format <- long_format %>%
select(round, Type, pl_fcast_err_mean = mean, pl_fcast_err_se = se, pl_fcast_err_median = median)
wide_format$Type <- ifelse(wide_format$Type == "0", "horizon = 0",
ifelse(wide_format$Type == "1", "horizon = 2",
ifelse(wide_format$Type == "2", "horizon = 5", "horizon = 10")))
wide_format$Type <- factor(wide_format$Type, levels = c("horizon = 0", "horizon = 2", "horizon = 5", "horizon = 10"))
ggplot(wide_format, aes(x = round, color=Type)) +
geom_line(aes(y = pl_fcast_err_mean), size=1) +
geom_errorbar(aes(ymin = pl_fcast_err_mean - 1.96 * pl_fcast_err_se, ymax = pl_fcast_err_mean + 1.96 * pl_fcast_err_se), width = 0.2,size=0.8) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 1.2, alpha= 1) +  # Add bold y=0 line
labs(x = "Round", y = "Mean of Forecast Error", title = "Mean of Forecast Error by Round") +
scale_x_continuous(breaks = seq(0, max(wide_format$round), by = 5)) +  # X-axis shows multiples of 5
theme_minimal()+
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),   # Maximize title text
axis.title.x = element_text(size = 18),                # Maximize X-axis label text
axis.title.y = element_text(size = 18),                # Maximize Y-axis label text
axis.text = element_text(size = 16),                   # Maximize tick labels
legend.text = element_text(size = 16),                 # Maximize legend text (if used)
legend.title = element_text(size = 18)                 # Maximize legend title (if used)
)+
annotate("text", x = 15, y = -30,
label = "Note: Error bars represent 95% CI", size = 5, hjust = 1)
ggplot(wide_format, aes(x = round, color=Type)) +
geom_line(aes(y = pl_fcast_err_median), size=1) +
# geom_errorbar(aes(ymin = pl_fcast_err_mean - 1.96 * pl_fcast_err_se, ymax = pl_fcast_err_mean + 1.96 * pl_fcast_err_se), width = 0.2,size=0.8) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 1.2, alpha= 1) +  # Add bold y=0 line
labs(x = "Round", y = "Median of Forecast Error", title = "Median of Forecast Error by Round") +
scale_x_continuous(breaks = seq(0, max(wide_format$round), by = 5)) +  # X-axis shows multiples of 5
theme_minimal()+
# annotate("text", x = 10, y = -30,
#          label = "Note: Error bars represent 95% CI", size = 5, hjust = 1)+
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),   # Maximize title text
axis.title.x = element_text(size = 18),                # Maximize X-axis label text
axis.title.y = element_text(size = 18),                # Maximize Y-axis label text
axis.text = element_text(size = 16),                   # Maximize tick labels
legend.text = element_text(size = 16),                 # Maximize legend text (if used)
legend.title = element_text(size = 18)                 # Maximize legend title (if used)
)
individual_forecast_data <- forecast_data[,c("part_label_ID", "round",
"pl_fcast_err_0", "pl_fcast_err_1",
"pl_fcast_err_2", "pl_fcast_err_3")]
# Function to perform t-test for each individual and each horizon, with error handling for too few observations
test_forecast_errors <- function(data) {
results <- data %>%
group_by(part_label_ID) %>%
summarise(
# Check non-missing data count
n0 = sum(!is.na(pl_fcast_err_0)),
n1 = sum(!is.na(pl_fcast_err_1)),
n2 = sum(!is.na(pl_fcast_err_2)),
n3 = sum(!is.na(pl_fcast_err_3)),
# Raw data t-tests
t_test_h0 = ifelse(n0 > 10, t.test(pl_fcast_err_0, mu = 0)$p.value, NA),
t_test_h1 = ifelse(n1 > 10, t.test(pl_fcast_err_1, mu = 0)$p.value, NA),
t_test_h2 = ifelse(n2 > 10, t.test(pl_fcast_err_2, mu = 0)$p.value, NA),
t_test_h3 = ifelse(n3 > 10, t.test(pl_fcast_err_3, mu = 0)$p.value, NA)
)
return(results)
}
# Apply the function to the data
forecast_test_results <- test_forecast_errors(individual_forecast_data)
forecast_test_results <- forecast_test_results %>%
mutate(across(starts_with("t_test_h"), ~ round(., 3)))
colnames(forecast_test_results) <- c("ID", "N_h0", "N_h2", "N_h5", "N_h10", "t_test_h0", "t_test_h2", "t_test_h5", "t_test_h10")
false_ratio <- forecast_test_results %>%
summarise(
h0 = mean(t_test_h0 >= 0.05, na.rm = TRUE),
h2 = mean(t_test_h2 >= 0.05, na.rm = TRUE),
h5 = mean(t_test_h5 >= 0.05, na.rm = TRUE),
h10 = mean(t_test_h10 >= 0.05, na.rm = TRUE)) %>%
pivot_longer(cols = everything(), names_to = "Horizons", values_to = "FalseRatio")
false_ratio$Type <- ifelse(false_ratio$Horizons == "h0", "horizon = 0",
ifelse(false_ratio$Horizons == "h2", "horizon = 2",
ifelse(false_ratio$Horizons == "h5", "horizon = 5", "horizon = 10")))
false_ratio$Type <- factor(false_ratio$Type, levels = c("horizon = 0", "horizon = 2", "horizon = 5", "horizon = 10"))
# Plot the bar plot
ggplot(false_ratio, aes(x = Type, y = FalseRatio)) +
geom_bar(stat = "identity") +
labs(y = "Ratio of False (no difference with 0)", x = "Horizons") +
theme_minimal()+
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),   # Maximize title text
axis.title.x = element_text(size = 18),                # Maximize X-axis label text
axis.title.y = element_text(size = 18),                # Maximize Y-axis label text
axis.text = element_text(size = 16),                   # Maximize tick labels
legend.text = element_text(size = 16),                 # Maximize legend text (if used)
legend.title = element_text(size = 18)                 # Maximize legend title (if used)
)
# This is a little unorthodox because we do not have 1-period ahead forecasts.
# The guiding principle is that future forecast errors should not depend on information available to the forecaster at the time they make the forecast.
#     Example:  Forecast error is P_8-f_{i8,8}=E_{i8,0}.
#     This error is available when the same person forecasts f_{i9,9}, so P_8- f_{i8,8} should be uncorrelated with P_9- f_{i9,9}
#     There should be similar zero autocorrelations for longer horizons h.
# I have to think about how to study these.
# Again the guiding principle is simple:
#     Any forecast error made at time t should be independent of forecast errors observable at t (or earlier).
#     I think this will create a matrix of forecast error autocorrelations across horizon values of h but have to think about this.
# Regression is E_{it,0}=\beta_0+\beta_1 E_{it-1,0}+\epsilon_{it+1}
test_data <- forecast_data[, c("round", "part_label_ID", "pl_fcast_err_0", "pl_fcast_err_1", "pl_fcast_err_2", "pl_fcast_err_3")]
# reorder by part_label_ID and round
test_data <- test_data[order(test_data$part_label_ID, test_data$round),]
# Define the function to run the regression and return coefficients and p-values
run_regression <- function(data) {
# Apply lag and remove rows with NA values
data <- data %>% mutate(lagged_error = lag(pl_fcast_err_0)) %>%
filter(!is.na(lagged_error))
# Run the regression only if there are enough non-NA values
if (nrow(data) > 1) {  # At least 2 data points required for regression
model <- lm(pl_fcast_err_0 ~ lagged_error, data = data)
return(summary(model)$coefficients)
} else {
return(matrix(NA, nrow = 2, ncol = 4))  # Return NA matrix if regression cannot be run
}
}
# Apply the regression for each participant and extract the necessary values
results <- test_data %>%
group_by(part_label_ID) %>%
do({
regression_results <- run_regression(.)
data.frame(
coeff_intercept = regression_results[1, 1],
p_value_intercept = regression_results[1, 4],
coeff_lag = regression_results[2, 1],
p_value_lag = regression_results[2, 4]
)
})
# View the results
print(results)
test_data <-  test_data %>%
group_by(part_label_ID) %>%
mutate(lag_pl_fcast_err_0 = dplyr::lag(pl_fcast_err_0, 1)) %>%
mutate(lag_pl_fcast_err_1 = dplyr::lag(pl_fcast_err_1, 1)) %>%
mutate(lag_pl_fcast_err_2 = dplyr::lag(pl_fcast_err_2, 1)) %>%
mutate(lag_pl_fcast_err_3 = dplyr::lag(pl_fcast_err_3, 1)) %>%
ungroup()
library(plm)
test_data <- pdata.frame(test_data, index=c("part_label_ID","round"), row.names=TRUE)
fcast_err_0.fe <- plm(pl_fcast_err_0~lag_pl_fcast_err_0, data = test_data, model = "within")
fcast_err_1.fe <- plm(pl_fcast_err_1~lag_pl_fcast_err_1, data = test_data, model = "within")
fcast_err_2.fe <- plm(pl_fcast_err_2~lag_pl_fcast_err_2, data = test_data, model = "within")
fcast_err_3.fe <- plm(pl_fcast_err_3~lag_pl_fcast_err_3, data = test_data, model = "within")
combined_models <- list(fcast_err_0.fe, fcast_err_1.fe, fcast_err_2.fe, fcast_err_3.fe)
# Create the HTML output
htmlreg(combined_models,
file = "ForecastError.html",
digits = 4, # Customize the number of digits
custom.model.names = c("Forecast Error (Horizon = 0)",
"Forecast Error (Horizon = 2)",
"Forecast Error (Horizon = 5)",
"Forecast Error (Horizon = 10)"),
custom.coef.map = list("pl_fcast_err_0" = "Forecast error (Horizon = 0)",
"lag_pl_fcast_err_0" = "Last forecast error (Horizon = 0)",
"pl_fcast_err_1" = "Forecast error (Horizon = 2)",
"lag_pl_fcast_err_1" = "Last forecast error (Horizon = 2)",
"pl_fcast_err_2" = "Forecast error (Horizon = 5)",
"lag_pl_fcast_err_2" = "Last forecast error (Horizon = 5)",
"pl_fcast_err_3" = "Forecast error (Horizon = 10)",
"lag_pl_fcast_err_3" = "Last forecast error (Horizon = 10)",
# Adding the fixed effects (example: for individual and time effects)
"individual_fixed_effect" = "Individual Fixed Effect"),
stars = c(0.01, 0.05, 0.1), # Add significance stars for p-values
bold = 0.05, # Bold significant coefficients
custom.note = "Significance levels: *** p < 0.001, ** p < 0.01, * p < 0.01. Models include individual and time fixed effects.",  # Custom note at the bottom of the table
caption = "") # Add caption
data_for_corr <- forecast_data[, c("round", "part_label_ID", "pl_f0","pl_f1", "pl_f2", "pl_f3",
"pl_fcast_err_0", "pl_fcast_err_1", "pl_fcast_err_2", "pl_fcast_err_3")]
data_for_corr <- data_for_corr[order(data_for_corr$part_label_ID, data_for_corr$round),]
# test <- subset(data_for_corr, part_label_ID == 259)
#
#
# reg_h0 <- lm(pl_fcast_err_0 ~ pl_f0, data = test)
# reg_h1 <- lm(pl_fcast_err_1 ~ pl_f1, data = test)
# reg_h2 <- lm(pl_fcast_err_2 ~ pl_f2, data = test)
# reg_h3 <- lm(pl_fcast_err_3 ~ pl_f3, data = test)
#
# summary(reg_h0)
# summary(reg_h1)
# summary(reg_h2)
# summary(reg_h3)
# Ensure part_label_ID is properly grouped and include p-values
results <- data_for_corr %>%
mutate(part_label_ID = as.factor(part_label_ID)) %>%
group_by(part_label_ID) %>%
do({
# Helper function to run regression and extract beta and p-value safely
run_regression <- function(formula, data) {
if (sum(complete.cases(data)) > 1) {  # Check if there's enough non-NA data
reg <- lm(formula, data = data)
if (length(coef(reg)) > 1) {  # Check if regression produces enough coefficients
return(c(coef(reg)[2], summary(reg)$coefficients[2, 4]))  # Return beta and p-value
}
}
return(c(NA, NA))  # Return NA if not enough data or regression fails
}
# Filter non-NA data for each regression
result_h0 <- run_regression(pl_fcast_err_0 ~ pl_f0, .[!is.na(.$pl_f0) & !is.na(.$pl_fcast_err_0), ])
result_h1 <- run_regression(pl_fcast_err_1 ~ pl_f1, .[!is.na(.$pl_f1) & !is.na(.$pl_fcast_err_1), ])
result_h2 <- run_regression(pl_fcast_err_2 ~ pl_f2, .[!is.na(.$pl_f2) & !is.na(.$pl_fcast_err_2), ])
result_h3 <- run_regression(pl_fcast_err_3 ~ pl_f3, .[!is.na(.$pl_f3) & !is.na(.$pl_fcast_err_3), ])
# Extract coefficients (beta_1) and p-values for each horizon
data.frame(
beta_1_h0 = result_h0[1],
p_value_h0 = result_h0[2],
beta_1_h1 = result_h1[1],
p_value_h1 = result_h1[2],
beta_1_h2 = result_h2[1],
p_value_h2 = result_h2[2],
beta_1_h3 = result_h3[1],
p_value_h3 = result_h3[2]
)
}) %>%
distinct()
# Reshape data into long format for both betas and p-values
results_long_b <- results %>%
pivot_longer(cols = starts_with("beta_1"), names_to = "horizon", values_to = "beta")
results_long_b<- results_long_b[,c("part_label_ID", "horizon", "beta")]
results_long_b$horizon <- ifelse(results_long_b$horizon == "beta_1_h0", "horizon = 0",
ifelse(results_long_b$horizon == "beta_1_h1", "horizon = 2",
ifelse(results_long_b$horizon == "beta_1_h2", "horizon = 5", "horizon = 10")))
results_long_p <- results[,c("part_label_ID","p_value_h0", "p_value_h1", "p_value_h2", "p_value_h3")] %>%
pivot_longer(cols = starts_with("p_value"), names_to = "horizon", values_to = "p_value")
results_long_p$horizon <- ifelse(results_long_p$horizon == "p_value_h0", "horizon = 0",
ifelse(results_long_p$horizon == "p_value_h1", "horizon = 2",
ifelse(results_long_p$horizon == "p_value_h2", "horizon = 5", "horizon = 10")))
# Combine the two dataframes
results_long <- results_long_b %>%
left_join(results_long_p, by = c("part_label_ID", "horizon"))
results_long$trader.x <- NULL
results_long$trader.y <- NULL
# Add a significance indicator (p-value < 0.05)
results_long <- results_long %>%
mutate(significant = ifelse(p_value < 0.05, "Significant", "Not Significant"))
# delete NA rows
results_long <- results_long[complete.cases(results_long),]
results_long$horizon <- factor(results_long$horizon, levels = c("horizon = 0", "horizon = 2", "horizon = 5", "horizon = 10"))
# Plot with different colors for significance and different shapes for horizons
ggplot(results_long, aes(x = part_label_ID, y = beta, color = significant)) +
facet_wrap(~horizon, scales = "free") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size=1) +
geom_point() +  # Use size to represent p-value significance
labs(title = "Beta Coefficient vs. P-value Across Forecast Horizons",
x = "ID", y = "Beta Coefficient") +
scale_color_manual(values = c("Significant" = "blue", "Not Significant" = "gray")) +  # Custom colors for significance
ylim(-3, 3) +  # Set Y-axis limits
theme_minimal() +
theme(strip.text = element_text(size = 20, face = "bold"),
panel.grid = element_blank(),
legend.position = "right",
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),   # Maximize title text
axis.title.x = element_text(size = 18),                # Maximize X-axis label text
axis.title.y = element_text(size = 18),                # Maximize Y-axis label text
axis.text.x = element_text(size = 4),                   # Maximize tick labels
axis.text.y = element_text(size = 16),
legend.text = element_text(size = 16),                 # Maximize legend text (if used)
legend.title = element_text(size = 18))  # Adjust legend position if needed
## draw the distribution of beta for each horizon
ggplot(results_long, aes(x = beta, fill = significant)) +
facet_wrap(~horizon, scales = "free") +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Beta Coefficient Across Forecast Horizons",
x = "Beta Coefficient",
y = "Density",
fill = "Significance") +
xlim(-3, 3) +  # Set X-axis limits
theme_minimal()+
theme(
strip.text = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),   # Maximize title text
axis.title.x = element_text(size = 18),                # Maximize X-axis label text
axis.title.y = element_text(size = 18),                # Maximize Y-axis label text
axis.text = element_text(size = 16),                   # Maximize tick labels
legend.text = element_text(size = 16),                 # Maximize legend text (if used)
legend.title = element_text(size = 18)                 # Maximize legend title (if used)
)
# Forecast bonus with Forecast error
sum_fore_error <- forecast_data %>%
group_by(part_label_ID) %>%
summarise(
sum_fore_error_h0 = sum(abs(pl_fcast_err_0), na.rm = TRUE),
sum_fore_error_h1 = sum(abs(pl_fcast_err_1), na.rm = TRUE),
sum_fore_error_h2 = sum(abs(pl_fcast_err_2), na.rm = TRUE),
sum_fore_error_h3 = sum(abs(pl_fcast_err_3), na.rm = TRUE)
)
payment_data <- raw_data[,c("part_label_ID", "market_bonus", "forecast_bonus", "total_bonus")]
# delete duplicated rows
payment_data <- payment_data[!duplicated(payment_data),]
sum_fore_error <- left_join(sum_fore_error, payment_data, by = "part_label_ID")
cor.test(sum_fore_error$sum_fore_error_h0, sum_fore_error$forecast_bonus)
cor.test(sum_fore_error$sum_fore_error_h1, sum_fore_error$forecast_bonus)
cor.test(sum_fore_error$sum_fore_error_h2, sum_fore_error$forecast_bonus)
cor.test(sum_fore_error$sum_fore_error_h3, sum_fore_error$forecast_bonus)
# Assuming your dataframe is named df
# Reshape data from wide to long format for plotting
sum_fore_error_long <- tidyr::pivot_longer(sum_fore_error,
cols = starts_with("sum_fore_error_h"),
names_to = "forecast_type",
values_to = "sum_fore_error")
# Assuming your reshaped dataframe is named sum_fore_error_long
# Plot the distribution of sum_fore_error by forecast_type
ggplot(sum_fore_error_long, aes(x = sum_fore_error, fill = forecast_type)) +
geom_density(alpha = 0.6) +  # You can use geom_histogram() if you prefer a histogram
labs(title = "Distribution of Sum of Forecast Errors by Forecast Type",
x = "Sum of Forecast Errors",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),   # Maximize title text
axis.title.x = element_text(size = 18),                # Maximize X-axis label text
axis.title.y = element_text(size = 18),                # Maximize Y-axis label text
axis.text = element_text(size = 16),                   # Maximize tick labels
legend.text = element_text(size = 16),                 # Maximize legend text (if used)
)
# Create the plot
ggplot(sum_fore_error_long, aes(x = forecast_bonus, y = sum_fore_error, color = forecast_type)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +  # Add linear regression line
# geom_line(aes(group = forecast_type)) +
labs(title = "Sum of Forecast Errors vs Forecast Bonus",
x = "Forecast Bonus",
y = "Sum of Forecast Errors (h0, h1, h2, h3)") +
theme_minimal() +
theme(legend.title = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),   # Maximize title text
axis.title.x = element_text(size = 18),                # Maximize X-axis label text
axis.title.y = element_text(size = 18),                # Maximize Y-axis label text
axis.text = element_text(size = 16),                   # Maximize tick labels
legend.text = element_text(size = 16),                 # Maximize legend text (if used)
)
summary(fcast_err_0.fe)
false_ratio
install.packages("gapminder")
install.packages("gganimate")
library(gapminder)
library(gganimate)
library(ggplot2)
library(gganimate)
library(gapminder)
# Assuming forecast_data_long contains a column 'round' you want to animate over
ggplot(forecast_data_long, aes(x = pl_fcast_err, fill = factor(round))) +
facet_wrap(~Type, scales = "free") +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Forecast Error Grouped by Round and Horizon",
x = "Forecast Error",
y = "Density",
fill = "Round") +
theme_minimal() +
theme(
strip.text = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 16),
legend.text = element_text(size = 16),
legend.title = element_text(size = 18)
) +
transition_states(round, transition_length = 2, state_length = 1) +  # Animating by round
ease_aes('sine-in-out') +
ggtitle('Distribution of Forecast Error: Round {closest_state}')  # Title updated with the current round
anim_save('123.gif')
anim_save("forecast_error_animation.mp4", anim)
# Render the animation and assign it to an object
anim <- ggplot(forecast_data_long, aes(x = pl_fcast_err, fill = factor(round))) +
facet_wrap(~Type, scales = "free") +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Forecast Error Grouped by Round and Horizon",
x = "Forecast Error",
y = "Density",
fill = "Round") +
theme_minimal() +
theme(
strip.text = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 16),
legend.text = element_text(size = 16),
legend.title = element_text(size = 18)
) +
transition_states(round, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
ggtitle('Distribution of Forecast Error: Round {closest_state}')
# Save the animation as a GIF
anim_save("forecast_error_animation.gif", anim)
anim_save("forecast_error_animation.mp4", anim)
anim_save("forecast_error_animation.gif", anim)
anim_save("forecast_error_animation.mp4", anim)
?save_animation
# Save the animation as a GIF
anim_save(anim,"forecast_error_animation.gif")
anim_save("forecast_error_animation.gif", animation = anim)
